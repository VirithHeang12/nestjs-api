var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.155,1,1.928]],["body/controllers/AppController.html",[0,1.847,1,3.084,2,1.481,3,0.46,4,0.397,5,0.397,6,3.252,7,0.596,8,1.682,9,4.63,10,1.481,11,0.036,12,0.831,13,3.929,14,1.348,15,1.682,16,0.657,17,0.831,18,2.698,19,3.252,20,0.46,21,0.07,22,3.929,23,1.794,24,1.628,25,3.929,26,0.029,27,0.029]],["title/modules/AppModule.html",[28,1.155,29,1.928]],["body/modules/AppModule.html",[1,3.062,2,1.628,3,0.378,4,0.326,5,0.326,11,0.036,16,0.747,17,0.683,18,2.813,19,2.674,20,0.378,21,0.058,26,0.025,27,0.025,28,1.834,29,3.779,30,1.475,31,1.475,32,1.814,33,1.814,34,1.475,35,2.732,36,1.814,37,2.674,38,2.674,39,2.674,40,2.813,41,3.128,42,2.544,43,2.425,44,1.814,45,1.631,46,3.231,47,2.718,48,3.231,49,3.231,50,3.231,51,3.231]],["title/injectables/AppService.html",[18,1.547,52,0.957]],["body/injectables/AppService.html",[3,0.48,4,0.414,5,0.414,7,0.622,8,1.726,9,4.7,11,0.036,12,0.867,14,1.406,15,1.726,16,0.549,17,0.867,18,2.541,20,0.48,21,0.074,24,1.699,26,0.03,27,0.03,52,1.572,53,2.07,54,3.393,55,4.1,56,3.393,57,4.1,58,4.1]],["title/controllers/AuthController.html",[0,1.155,59,1.928]],["body/controllers/AuthController.html",[0,1.049,2,1.049,3,0.326,4,0.281,5,0.281,7,0.423,8,1.338,10,1.049,11,0.037,12,0.589,14,1.545,15,1.827,16,0.523,17,0.589,20,0.326,21,0.088,23,1.271,24,1.866,26,0.023,27,0.023,59,3.351,60,2.304,61,1.988,62,2.784,63,1.154,64,3.901,65,3.901,66,3.901,67,2.274,68,3.228,69,2.304,70,3.44,71,2.784,72,2.784,73,3.228,74,2.99,75,1.154,76,1.154,77,0.589,78,0.869,79,3.232,80,3.228,81,1.563,82,2.304,83,0.869,84,2.346,85,2.304,86,2.784,87,2.784,88,2.833,89,1.751,90,1.406,91,1.406,92,2.784,93,2.304,94,2.784,95,2.784,96,1.751,97,1.988,98,2.784,99,1.988]],["title/modules/AuthModule.html",[28,1.155,40,1.547]],["body/modules/AuthModule.html",[2,1.71,3,0.408,4,0.352,5,0.352,11,0.036,16,0.717,17,0.736,20,0.408,21,0.062,26,0.027,27,0.027,28,1.902,30,1.589,31,1.589,32,1.954,33,1.954,34,1.589,35,2.834,36,2.834,40,2.926,42,2.072,43,2.547,44,1.954,45,1.758,47,2.19,59,3.176,84,2.774,85,2.881,100,2.881,101,2.881,102,2.881,103,3.481,104,2.855,105,3.481,106,2.881]],["title/injectables/AuthService.html",[52,0.957,84,1.399]],["body/injectables/AuthService.html",[3,0.323,4,0.279,5,0.279,7,0.419,8,1.33,11,0.037,12,0.948,14,1.537,15,1.941,16,0.52,17,0.584,20,0.323,21,0.049,23,1.26,24,1.857,26,0.023,27,0.023,52,1.211,53,1.393,67,2.682,68,3.209,69,3.209,70,3.222,73,3.209,74,2.729,75,1.857,76,1.857,77,0.948,78,1.4,79,2.439,80,3.209,84,1.77,88,2.439,90,1.958,91,1.393,97,2.768,99,1.97,104,1.736,107,2.284,108,3.877,109,2.284,110,2.26,111,2.76,112,3.877,113,2.76,114,3.877,115,2.76,116,1.97,117,2.284,118,2.284,119,2.284,120,2.516,121,2.76,122,1.97,123,1.393,124,2.284,125,2.284,126,2.284,127,1.143,128,1.97,129,1.97]],["title/classes/CreatePost.html",[21,0.055,130,1.547]],["body/classes/CreatePost.html",[3,0.138,4,0.119,5,0.119,7,0.179,10,1.739,11,0.036,12,0.976,15,1.689,16,0.497,20,0.138,21,0.047,26,0.012,27,0.012,56,4.202,63,1.912,74,1.12,77,1.101,78,1.477,83,1.441,96,3.491,120,1.457,127,0.827,128,2.97,129,3.295,130,1.008,131,0.538,132,3.377,133,0.841,134,0.89,135,3.418,136,2.596,137,2.596,138,2.596,139,2.596,140,2.596,141,4.334,142,2.148,143,3.418,144,2.44,145,3.418,146,3.448,147,5.078,148,2.768,149,1.178,150,1.178,151,1.995,152,1.995,153,3.055,154,3.055,155,1.178,156,1.178,157,1.922,158,3.072,159,1.853,160,1.995,161,1.995,162,4.484,163,1.995,164,1.178,165,1.178,166,1.178,167,3.072,168,3.055,169,3.055,170,1.178,171,1.178,172,3.055,173,1.995,174,3.055,175,3.055,176,3.055,177,1.178,178,1.178,179,1.995,180,1.995,181,1.178,182,1.178,183,1.178,184,3.055,185,3.055,186,1.651,187,1.995,188,1.178,189,3.072,190,1.178,191,1.178,192,1.178,193,1.178,194,3.055,195,1.178,196,1.178,197,1.178,198,0.827,199,1.395,200,1.178,201,1.178,202,2.596,203,1.178,204,1.995,205,1.995,206,2.335,207,1.995,208,2.824,209,2.44,210,1.995,211,0.975,212,0.975,213,1.995,214,0.595,215,1.995,216,1.178,217,1.178,218,0.741,219,1.178,220,0.975,221,3.273,222,3.072,223,0.595,224,1.178,225,1.651,226,1.995,227,0.841,228,1.178,229,1.995,230,1.178,231,1.178,232,1.178,233,1.178,234,1.995,235,1.178,236,1.178,237,1.995,238,1.995,239,0.975,240,2.65,241,3.055,242,2.084,243,3.055,244,1.995,245,1.995,246,1.178]],["title/classes/CreatePostMetaOptionsDto.html",[21,0.055,157,1.928]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.444,4,0.383,5,0.383,7,0.575,10,1.805,11,0.036,12,1.013,15,1.643,16,0.508,20,0.444,21,0.086,26,0.028,27,0.028,77,1.013,83,1.641,131,1.729,132,3.751,134,1.643,157,3.014,159,3.751,206,3.474,209,3.42,214,1.912,240,3.751,242,2.949,247,3.134,248,3.788,249,3.788,250,3.788]],["title/classes/CreateUserDto.html",[21,0.055,251,1.72]],["body/classes/CreateUserDto.html",[3,0.355,4,0.307,5,0.307,7,0.46,10,1.908,11,0.036,12,1.071,15,1.955,16,0.555,17,0.642,20,0.355,21,0.074,26,0.024,27,0.024,70,3.334,77,1.071,78,1.472,79,2.965,131,1.385,134,1.42,186,3.426,206,3.185,208,2.956,209,3.615,211,2.511,212,2.511,214,1.532,239,3.426,251,2.324,252,4.386,253,2.166,254,4.713,255,4.713,256,3.034,257,3.034,258,3.034,259,3.034,260,3.034,261,3.034,262,3.034,263,4.14,264,4.14,265,4.14,266,4.14,267,4.14,268,3.034,269,4.14,270,3.034,271,3.034,272,4.14,273,3.034,274,3.034]],["title/classes/GetUsersParamDto.html",[21,0.055,275,1.72]],["body/classes/GetUsersParamDto.html",[3,0.433,4,0.374,5,0.374,7,0.561,10,1.394,11,0.036,12,0.782,16,0.632,20,0.433,21,0.085,26,0.028,27,0.028,63,1.955,74,2.649,77,0.782,78,1.474,127,2.343,131,1.689,134,1.619,146,2.969,148,1.868,198,1.955,199,2.373,208,3.369,214,1.868,222,3.905,223,1.868,275,2.649,276,3.369,277,2.649,278,3.061,279,3.699,280,3.699,281,3.699,282,3.905]],["title/injectables/LoggerMiddleware.html",[52,0.957,283,1.928]],["body/injectables/LoggerMiddleware.html",[3,0.444,4,0.383,5,0.383,7,0.575,8,1.643,11,0.036,12,0.801,14,1.299,16,0.508,17,0.801,20,0.444,21,0.068,26,0.028,27,0.028,52,1.496,53,1.912,75,1.569,76,1.569,77,0.801,78,1.183,89,3.305,283,3.014,284,3.134,285,4.791,286,4.791,287,5.254,288,4.569,289,3.788,290,3.788,291,3.134,292,4.791,293,3.134,294,3.788]],["title/classes/PatchPostDto.html",[21,0.055,295,1.72]],["body/classes/PatchPostDto.html",[3,0.415,4,0.358,5,0.358,7,0.538,10,1.336,11,0.036,12,0.75,16,0.683,20,0.415,21,0.082,26,0.027,27,0.027,63,1.469,77,0.75,83,1.434,96,2.889,127,2.313,129,2.532,130,1.791,131,1.619,133,2.532,134,1.575,146,2.889,148,2.319,158,2.935,198,1.903,199,2.46,206,2.889,214,1.791,218,2.231,221,3.801,223,1.791,282,3.801,295,2.578,296,3.801,297,3.801,298,4.593,299,3.546,300,3.546,301,2.935,302,2.532]],["title/classes/PatchUserDto.html",[21,0.055,303,1.928]],["body/classes/PatchUserDto.html",[3,0.5,4,0.431,5,0.431,11,0.036,16,0.691,20,0.5,21,0.076,26,0.03,27,0.03,131,1.948,218,2.684,227,3.046,251,2.395,253,3.046,297,4.267,301,3.53,303,3.244,304,3.53,305,5.156,306,3.53,307,3.53]],["title/interfaces/Post.html",[83,0.957,308,1.928]],["body/interfaces/Post.html",[3,0.453,4,0.39,5,0.39,7,0.587,11,0.035,15,2.006,20,0.453,26,0.028,27,0.028,77,1.176,81,3.122,83,1.515,120,3.122,127,2.305,134,1.664,144,3.971,198,2.423,308,2.431,309,3.865,310,3.198]],["title/controllers/PostsController.html",[0,1.155,311,1.928]],["body/controllers/PostsController.html",[0,0.824,2,0.824,3,0.256,4,0.221,5,0.221,7,0.332,8,1.123,10,1.479,11,0.036,12,0.83,14,1.346,16,0.625,17,0.462,20,0.256,21,0.039,23,0.998,24,1.626,26,0.019,27,0.019,61,1.56,63,2.164,67,2.696,74,1.837,75,1.626,76,1.626,77,0.83,78,1.225,81,1.227,82,1.809,83,1.811,88,1.375,90,1.104,91,1.104,93,2.709,120,2.932,123,1.653,130,2.473,142,2.709,198,2.317,218,2.741,223,1.104,277,1.227,295,2.851,302,2.337,311,2.059,312,1.809,313,3.273,314,2.709,315,2.186,316,2.709,317,3.273,318,3.273,319,3.606,320,2.186,321,2.186,322,2.186,323,2.186,324,2.186,325,2.186,326,3.606,327,4.358,328,3.273,329,2.186,330,2.186,331,3.862,332,1.809,333,1.981,334,1.809,335,3.247,336,3.924,337,1.809,338,1.56,339,1.56,340,2.186,341,1.809,342,2.186,343,2.186,344,2.186,345,2.709,346,2.186,347,2.186,348,2.186,349,2.186,350,3.273,351,2.186,352,2.186,353,2.186,354,2.186,355,2.186,356,2.186]],["title/modules/PostsModule.html",[28,1.155,41,1.72]],["body/modules/PostsModule.html",[2,1.602,3,0.37,4,0.319,5,0.319,8,1.082,11,0.036,12,0.667,14,1.082,16,0.72,17,0.667,20,0.37,21,0.057,26,0.025,27,0.025,28,1.812,30,1.441,31,1.441,32,1.771,33,1.771,34,1.441,35,2.699,36,1.771,41,3.228,42,2.527,43,2.387,44,1.771,45,1.593,47,2.675,75,1.308,76,1.308,77,0.667,78,0.985,89,1.985,106,2.611,283,1.985,293,2.611,311,3.025,333,2.794,334,2.611,357,2.611,358,3.156,359,2.611,360,3.156,361,3.156,362,4.252,363,5.146,364,3.156,365,4.252,366,4.252,367,3.156,368,3.156,369,3.156,370,3.156]],["title/injectables/PostsService.html",[52,0.957,333,1.547]],["body/injectables/PostsService.html",[3,0.205,4,0.177,5,0.177,7,0.266,8,0.947,11,0.037,12,0.893,14,1.172,16,0.566,17,0.371,20,0.205,21,0.031,23,1.771,24,1.416,26,0.016,27,0.016,52,0.862,53,0.885,67,2.527,75,1.607,76,1.607,77,0.893,78,1.211,81,3.126,83,1.871,90,1.394,91,1.959,97,1.251,99,2.77,109,1.45,110,1.858,116,1.251,118,1.45,120,3.096,122,2.77,123,1.959,124,2.829,125,3.21,126,2.829,127,2.165,130,2.456,134,0.947,144,3.472,148,0.885,198,2.201,199,2.386,242,0.984,295,2.178,302,1.972,314,2.285,326,3.21,333,1.394,338,1.251,339,1.251,371,1.45,372,3.418,373,2.762,374,1.752,375,2.762,376,1.752,377,2.762,378,1.752,379,2.762,380,1.752,381,4.24,382,4.484,383,3.711,384,1.752,385,1.752,386,1.752,387,1.752,388,2.762,389,1.752,390,1.752,391,1.752,392,1.752]],["title/controllers/UsersController.html",[0,1.155,393,1.928]],["body/controllers/UsersController.html",[0,0.691,2,0.691,3,0.215,4,0.185,5,0.185,7,0.278,8,0.982,10,1.499,11,0.037,12,0.841,14,1.364,15,1.207,16,0.612,17,0.388,20,0.215,21,0.033,23,0.837,24,1.186,26,0.017,27,0.017,61,1.309,63,2.103,67,2.713,75,1.648,76,1.894,77,1.045,78,1.242,81,1.976,83,1.099,88,1.8,89,1.8,90,0.926,91,0.926,96,2.502,110,1.459,123,1.445,127,1.186,128,2.839,148,2.008,198,2.283,199,1.307,223,0.926,251,2.566,275,2.566,277,2.969,288,2.368,303,2.502,307,2.368,316,1.518,319,1.518,331,2.913,332,1.518,335,2.368,337,1.518,338,1.309,339,1.309,341,1.518,345,1.518,393,1.8,394,1.518,395,3.52,396,2.913,397,2.913,398,3.52,399,1.834,400,4.571,401,4.571,402,1.834,403,1.518,404,2.862,405,1.834,406,1.518,407,3.706,408,2.862,409,2.862,410,1.834,411,3.783,412,2.862,413,2.862,414,1.834,415,1.834,416,1.834,417,1.834,418,3.52,419,2.862,420,1.834,421,1.834,422,1.834,423,1.834,424,1.834,425,1.834,426,1.518,427,1.518,428,3.52,429,1.834,430,1.834,431,1.834,432,1.834,433,1.834,434,1.834,435,1.834,436,1.834,437,1.834,438,1.834,439,1.834,440,1.834,441,1.834,442,1.834,443,1.834,444,1.834,445,1.834]],["title/modules/UsersModule.html",[28,1.155,42,1.399]],["body/modules/UsersModule.html",[2,1.71,3,0.408,4,0.352,5,0.352,11,0.036,16,0.717,17,0.736,20,0.408,21,0.062,26,0.027,27,0.027,28,1.902,30,1.589,31,1.589,32,1.954,33,1.954,34,1.589,35,2.834,36,2.834,40,2.291,42,2.646,43,2.547,44,1.954,45,1.758,47,2.19,104,2.855,110,2.517,393,3.176,427,2.881,446,2.881,447,2.881,448,2.881,449,3.481,450,3.481,451,3.481]],["title/injectables/UsersService.html",[52,0.957,110,1.27]],["body/injectables/UsersService.html",[3,0.26,4,0.224,5,0.224,7,0.336,8,1.135,11,0.037,12,0.993,14,1.357,15,1.689,16,0.53,17,0.469,20,0.26,21,0.04,23,1.012,24,1.64,26,0.019,27,0.019,52,1.033,53,1.119,67,2.707,70,3.21,75,1.818,76,2.173,77,0.993,78,1.37,79,3.098,84,2.33,90,1.67,91,2.216,104,1.394,110,1.37,116,1.582,117,1.834,119,1.834,122,1.582,123,1.119,127,1.818,134,1.135,148,1.119,198,2.173,199,1.51,242,1.244,275,2.635,276,1.582,277,2.463,381,2.737,396,2.737,397,3.275,403,2.737,406,1.834,407,3.133,411,2.737,426,1.834,452,1.834,453,3.308,454,2.216,455,2.216,456,2.216,457,3.308,458,2.216,459,2.216,460,3.308,461,4.388,462,3.308,463,4.388,464,3.308,465,3.308,466,2.216,467,2.216,468,2.216,469,2.216,470,2.216,471,3.308,472,2.216,473,2.216,474,2.216,475,2.216,476,2.216,477,2.216,478,2.216]],["title/coverage.html",[479,2.976]],["body/coverage.html",[0,1.9,1,1.89,5,0.304,6,2.487,11,0.036,18,1.517,21,0.098,26,0.024,27,0.024,34,1.372,52,1.649,54,2.487,59,1.89,60,2.487,77,0.636,83,1.285,84,1.372,107,2.487,110,1.245,123,1.517,130,1.517,132,2.937,133,2.937,157,1.89,159,2.145,247,2.487,251,1.687,252,2.487,253,2.937,275,1.687,276,2.145,277,1.687,278,2.487,283,1.89,284,2.487,291,2.487,295,1.687,296,2.487,303,1.89,304,2.487,308,1.89,310,2.487,311,1.89,312,2.487,333,1.517,371,2.487,393,1.89,394,2.487,452,2.487,479,2.145,480,2.487,481,3.005,482,3.005,483,6.045,484,5.282,485,3.005,486,3.005,487,3.005,488,3.005,489,2.487,490,4.113,491,3.005,492,3.005,493,3.005,494,4.69,495,4.113,496,3.005,497,3.005]],["title/dependencies.html",[31,1.681,498,2.123]],["body/dependencies.html",[11,0.036,17,0.867,21,0.09,26,0.03,27,0.03,31,1.872,214,2.07,220,3.393,223,2.07,227,2.927,306,3.393,499,4.1,500,4.1,501,5.446,502,4.1,503,4.1,504,4.1,505,4.1,506,4.1,507,4.1,508,4.1,509,4.1,510,4.1,511,4.1,512,4.1,513,4.1]],["title/miscellaneous/enumerations.html",[514,1.614,515,3.047]],["body/miscellaneous/enumerations.html",[7,0.594,11,0.036,26,0.029,27,0.029,83,1.527,167,4.046,189,4.046,242,3.377,407,3.491,514,2.462,515,3.238,516,4.89,517,4.89,518,4.89,519,4.89,520,4.89,521,4.89,522,4.89,523,4.89,524,4.89,525,4.89]],["title/miscellaneous/functions.html",[514,1.614,526,3.047]],["body/miscellaneous/functions.html",[7,0.708,11,0.032,26,0.032,27,0.032,34,2.628,489,3.861,514,2.935,526,3.861,527,4.666]],["title/index.html",[7,0.389,528,2.566,529,2.566]],["body/index.html",[4,0.22,11,0.034,26,0.019,27,0.019,45,2.469,63,0.901,146,2.735,225,1.8,240,1.553,479,1.553,480,2.699,530,2.176,531,2.176,532,3.913,533,3.262,534,2.176,535,2.176,536,2.176,537,2.176,538,3.262,539,3.913,540,2.176,541,2.176,542,2.176,543,4.348,544,2.176,545,5.215,546,2.176,547,5.071,548,2.176,549,2.176,550,2.176,551,3.262,552,2.176,553,3.262,554,2.176,555,3.913,556,2.176,557,3.262,558,2.176,559,2.176,560,2.176,561,2.176,562,2.176,563,4.348,564,5.215,565,4.89,566,3.262,567,2.176,568,2.176,569,2.176,570,2.176,571,4.89,572,3.262,573,4.348,574,2.176,575,3.262,576,2.176,577,2.176,578,3.262,579,4.89,580,4.348,581,2.176,582,3.262,583,2.176,584,2.176,585,2.176,586,2.176,587,4.348,588,2.176,589,2.176,590,2.176,591,2.176,592,3.262,593,2.176,594,2.176,595,2.176,596,2.176,597,2.176,598,3.262,599,2.176,600,2.176,601,2.176,602,3.262,603,2.176,604,2.176,605,3.598,606,3.262,607,2.176,608,2.176,609,2.176,610,2.176,611,2.176,612,2.176,613,2.176,614,2.176,615,3.262,616,2.176,617,2.176,618,2.176,619,2.176,620,3.913,621,2.176,622,2.176,623,2.176,624,2.176,625,2.176,626,2.176,627,3.262,628,2.176,629,2.176,630,2.176,631,2.176,632,2.176,633,3.262,634,2.176,635,2.176,636,2.176,637,3.262,638,3.262,639,2.176,640,2.176,641,2.176,642,2.176,643,2.176,644,2.176,645,2.176,646,2.176,647,2.176,648,2.176,649,2.176,650,1.8,651,2.176,652,2.176,653,2.176,654,2.176,655,2.176,656,2.176,657,1.8]],["title/modules.html",[30,1.903]],["body/modules.html",[11,0.031,26,0.031,27,0.031,29,2.758,30,2.002,40,2.214,41,2.461,42,2.002,605,4.808,658,5.81,659,5.81,660,5.81]],["title/overview.html",[661,3.45]],["body/overview.html",[2,1.239,11,0.035,18,2.479,26,0.026,27,0.026,28,1.239,29,3.732,30,1.501,31,1.501,32,1.845,33,1.845,34,1.501,35,1.845,36,1.845,37,2.72,38,2.72,39,2.72,40,2.827,41,3.208,42,2.609,43,2.453,44,1.845,45,1.66,53,1.66,84,2.609,100,2.72,101,2.72,102,2.72,110,2.368,131,1.501,199,1.501,308,2.068,333,2.479,357,2.72,359,2.72,383,3.616,446,2.72,447,2.72,448,2.72,661,2.72,662,3.287,663,3.287]],["title/properties.html",[134,1.263,498,2.123]],["body/properties.html",[11,0.036,26,0.032,27,0.032,63,1.905,134,1.577,650,3.805,657,3.805,664,4.598,665,4.598,666,4.598]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/LoggerMiddleware.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"interfaces/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":483,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":665,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":508,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":511,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":507,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":490,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":493,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":484,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":492,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":491,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":494,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":495,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":175,"title":{},"body":{"classes/CreatePost.html":{}}}],["01t00:00:00z",{"_index":176,"title":{},"body":{"classes/CreatePost.html":{}}}],["1",{"_index":199,"title":{},"body":{"classes/CreatePost.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["1.1.26",{"_index":500,"title":{},"body":{"dependencies.html":{}}}],["1/4",{"_index":488,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":501,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":485,"title":{},"body":{"coverage.html":{}}}],["12345678",{"_index":463,"title":{},"body":{"injectables/UsersService.html":{}}}],["1})@isoptional()@isint",{"_index":280,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["2",{"_index":381,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["2.0.5",{"_index":503,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":486,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":328,"title":{},"body":{"controllers/PostsController.html":{}}}],["201",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{}}}],["2022",{"_index":174,"title":{},"body":{"classes/CreatePost.html":{}}}],["25",{"_index":487,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":382,"title":{},"body":{"injectables/PostsService.html":{}}}],["4",{"_index":383,"title":{},"body":{"injectables/PostsService.html":{},"overview.html":{}}}],["401",{"_index":470,"title":{},"body":{"injectables/UsersService.html":{}}}],["404",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["5",{"_index":662,"title":{},"body":{"overview.html":{}}}],["6",{"_index":663,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":513,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":506,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":185,"title":{},"body":{"classes/CreatePost.html":{}}}],["allowing",{"_index":593,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":643,"title":{},"body":{"index.html":{}}}],["apioperation",{"_index":335,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":221,"title":{},"body":{"classes/CreatePost.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":158,"title":{},"body":{"classes/CreatePost.html":{},"classes/PatchPostDto.html":{}}}],["apipropertyoptional",{"_index":222,"title":{},"body":{"classes/CreatePost.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({default",{"_index":279,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":145,"title":{},"body":{"classes/CreatePost.html":{}}}],["apiquery",{"_index":428,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":336,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags",{"_index":337,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":340,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":429,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":565,"title":{},"body":{"index.html":{}}}],["applications",{"_index":538,"title":{},"body":{"index.html":{}}}],["apply(loggermiddleware",{"_index":369,"title":{},"body":{"modules/PostsModule.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":161,"title":{},"body":{"classes/CreatePost.html":{}}}],["auth",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/auth.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":59,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":650,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":84,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["aws",{"_index":582,"title":{},"body":{"index.html":{}}}],["backers",{"_index":644,"title":{},"body":{"index.html":{}}}],["based",{"_index":577,"title":{},"body":{"index.html":{}}}],["board",{"_index":636,"title":{},"body":{"index.html":{}}}],["body",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["body('password",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":660,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":658,"title":{},"body":{"modules.html":{}}}],["building",{"_index":533,"title":{},"body":{"index.html":{}}}],["channel",{"_index":608,"title":{},"body":{"index.html":{}}}],["check",{"_index":571,"title":{},"body":{"index.html":{}}}],["class",{"_index":21,"title":{"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/LoggerMiddleware.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":131,"title":{},"body":{"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":592,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":576,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":357,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":358,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":359,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":446,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":447,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":448,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":599,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":499,"title":{},"body":{"dependencies.html":{}}}],["configure",{"_index":361,"title":{},"body":{"modules/PostsModule.html":{}}}],["configure(consumer",{"_index":362,"title":{},"body":{"modules/PostsModule.html":{}}}],["console.log('request",{"_index":294,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["console.log(createuserdto",{"_index":444,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(limit",{"_index":477,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["constructor",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":454,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["constructor(usersservice",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["consumer",{"_index":365,"title":{},"body":{"modules/PostsModule.html":{}}}],["contains",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{}}}],["content",{"_index":135,"title":{},"body":{"classes/CreatePost.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":341,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["controllers/auth.controller",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{}}}],["controllers/posts.controller",{"_index":367,"title":{},"body":{"modules/PostsModule.html":{}}}],["courses",{"_index":614,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":479,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":218,"title":{},"body":{"classes/CreatePost.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{}}}],["created",{"_index":346,"title":{},"body":{"controllers/PostsController.html":{}}}],["created.'})@post(':userid/posts')@httpcode(201",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":130,"title":{"classes/CreatePost.html":{}},"body":{"classes/CreatePost.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpost(@body",{"_index":349,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(post",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(userid",{"_index":375,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostmetaoptionsdto",{"_index":157,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["createuser",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":251,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["database",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{}}}],["date",{"_index":172,"title":{},"body":{"classes/CreatePost.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":610,"title":{},"body":{"index.html":{}}}],["default",{"_index":148,"title":{},"body":{"classes/CreatePost.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["defaultvaluepipe",{"_index":421,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":441,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":439,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/LoggerMiddleware.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":563,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":581,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":572,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":591,"title":{},"body":{"index.html":{}}}],["description",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePost.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":548,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":622,"title":{},"body":{"index.html":{}}}],["discord",{"_index":607,"title":{},"body":{"index.html":{}}}],["dive",{"_index":609,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":480,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":461,"title":{},"body":{"injectables/UsersService.html":{}}}],["draft",{"_index":520,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":338,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":425,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/patch",{"_index":339,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":558,"title":{},"body":{"index.html":{}}}],["each",{"_index":194,"title":{},"body":{"classes/CreatePost.html":{}}}],["efficient",{"_index":534,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":570,"title":{},"body":{"index.html":{}}}],["email",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["endpoints",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{}}}],["ensure",{"_index":568,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":626,"title":{},"body":{"index.html":{}}}],["enum",{"_index":168,"title":{},"body":{"classes/CreatePost.html":{}}}],["enumerations",{"_index":515,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumname",{"_index":169,"title":{},"body":{"classes/CreatePost.html":{}}}],["enums/post",{"_index":215,"title":{},"body":{"classes/CreatePost.html":{}}}],["error",{"_index":434,"title":{},"body":{"controllers/UsersController.html":{}}}],["example",{"_index":146,"title":{},"body":{"classes/CreatePost.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"index.html":{}}}],["excerpt",{"_index":179,"title":{},"body":{"classes/CreatePost.html":{}}}],["experience",{"_index":612,"title":{},"body":{"index.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/LoggerMiddleware.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"interfaces/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":505,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":297,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePost.html":{},"controllers/UsersController.html":{}}}],["false})@isiso8601()@isoptional",{"_index":177,"title":{},"body":{"classes/CreatePost.html":{}}}],["false})@isoptional()@isarray()@isstring({each",{"_index":192,"title":{},"body":{"classes/CreatePost.html":{}}}],["false})@isoptional()@isurl",{"_index":155,"title":{},"body":{"classes/CreatePost.html":{}}}],["false})@isstring()@isoptional",{"_index":149,"title":{},"body":{"classes/CreatePost.html":{}}}],["fast",{"_index":585,"title":{},"body":{"index.html":{}}}],["featured",{"_index":151,"title":{},"body":{"classes/CreatePost.html":{}}}],["featuredimageurl",{"_index":136,"title":{},"body":{"classes/CreatePost.html":{}}}],["features",{"_index":595,"title":{},"body":{"index.html":{}}}],["few",{"_index":587,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/LoggerMiddleware.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"interfaces/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":373,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall(userid",{"_index":377,"title":{},"body":{"injectables/PostsService.html":{}}}],["firstname",{"_index":254,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["focus",{"_index":594,"title":{},"body":{"index.html":{}}}],["follow",{"_index":630,"title":{},"body":{"index.html":{}}}],["format",{"_index":180,"title":{},"body":{"classes/CreatePost.html":{}}}],["forroutes(postscontroller",{"_index":370,"title":{},"body":{"modules/PostsModule.html":{}}}],["forwardref",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["framework",{"_index":532,"title":{},"body":{"index.html":{}}}],["full",{"_index":625,"title":{},"body":{"index.html":{}}}],["function",{"_index":291,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":526,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":590,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':userid/posts",{"_index":342,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/posts')@httpcode(200",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts(@param('userid",{"_index":343,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts(userid",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":528,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuser(getusersparamdto",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuseridbyemailandpassword",{"_index":453,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuseridbyemailandpassword(email",{"_index":457,"title":{},"body":{"injectables/UsersService.html":{}}}],["getusers",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers(limit",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusersparamdto",{"_index":275,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["getusersparamdto.id",{"_index":473,"title":{},"body":{"injectables/UsersService.html":{}}}],["graph",{"_index":617,"title":{},"body":{"index.html":{}}}],["grow",{"_index":640,"title":{},"body":{"index.html":{}}}],["hands",{"_index":611,"title":{},"body":{"index.html":{}}}],["handy",{"_index":600,"title":{},"body":{"index.html":{}}}],["headers",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":56,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePost.html":{}}}],["help",{"_index":615,"title":{},"body":{"index.html":{}}}],["here",{"_index":648,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["httpcode(200",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["httpcode(201",{"_index":348,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpexception",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["httpexception('post",{"_index":391,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('unauthorized",{"_index":469,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpexception('user",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["https://example.com/image.jpg",{"_index":154,"title":{},"body":{"classes/CreatePost.html":{}}}],["https://nestjs.com",{"_index":654,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":422,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpstatus.internal_server_error",{"_index":433,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpstatus.ok",{"_index":430,"title":{},"body":{"controllers/UsersController.html":{}}}],["id",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePost.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"interfaces/Post.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":481,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":152,"title":{},"body":{"classes/CreatePost.html":{}}}],["implements",{"_index":293,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"modules/PostsModule.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/LoggerMiddleware.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/LoggerMiddleware.html":{},"classes/PatchPostDto.html":{},"interfaces/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/LoggerMiddleware.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"interfaces/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":574,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":597,"title":{},"body":{"index.html":{}}}],["inject",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":52,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":53,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injects",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["install",{"_index":589,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":546,"title":{},"body":{"index.html":{}}}],["interact",{"_index":618,"title":{},"body":{"index.html":{}}}],["interface",{"_index":308,"title":{"interfaces/Post.html":{}},"body":{"interfaces/Post.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":309,"title":{},"body":{"interfaces/Post.html":{}}}],["interfaces/posts.interface",{"_index":385,"title":{},"body":{"injectables/PostsService.html":{}}}],["ip",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":202,"title":{},"body":{"classes/CreatePost.html":{}}}],["isauthenticated",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{}}}],["isauthenticated(token",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":269,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":256,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":203,"title":{},"body":{"classes/CreatePost.html":{}}}],["isenum(poststatuses",{"_index":235,"title":{},"body":{"classes/CreatePost.html":{}}}],["isenum(posttypes",{"_index":230,"title":{},"body":{"classes/CreatePost.html":{}}}],["isint",{"_index":282,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":204,"title":{},"body":{"classes/CreatePost.html":{}}}],["isjson",{"_index":205,"title":{},"body":{"classes/CreatePost.html":{}}}],["isnotempty",{"_index":206,"title":{},"body":{"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isstring",{"_index":248,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isnumber",{"_index":207,"title":{},"body":{"classes/CreatePost.html":{}}}],["isoptional",{"_index":208,"title":{},"body":{"classes/CreatePost.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":209,"title":{},"body":{"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":258,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":262,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":260,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":210,"title":{},"body":{"classes/CreatePost.html":{}}}],["items",{"_index":163,"title":{},"body":{"classes/CreatePost.html":{}}}],["jane",{"_index":464,"title":{},"body":{"injectables/UsersService.html":{}}}],["janedoe@gmail.com",{"_index":465,"title":{},"body":{"injectables/UsersService.html":{}}}],["job",{"_index":633,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":635,"title":{},"body":{"index.html":{}}}],["john",{"_index":460,"title":{},"body":{"injectables/UsersService.html":{}}}],["johndoe@gmail.com",{"_index":462,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":646,"title":{},"body":{"index.html":{}}}],["json",{"_index":236,"title":{},"body":{"classes/CreatePost.html":{}}}],["json'})@isoptional()@isjson",{"_index":181,"title":{},"body":{"classes/CreatePost.html":{}}}],["kamil",{"_index":651,"title":{},"body":{"index.html":{}}}],["key",{"_index":240,"title":{},"body":{"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"index.html":{}}}],["key1",{"_index":241,"title":{},"body":{"classes/CreatePost.html":{}}}],["key2",{"_index":244,"title":{},"body":{"classes/CreatePost.html":{}}}],["kon",{"_index":57,"title":{},"body":{"injectables/AppService.html":{}}}],["lastname",{"_index":255,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["learn",{"_index":603,"title":{},"body":{"index.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":657,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":638,"title":{},"body":{"index.html":{}}}],["limit",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":632,"title":{},"body":{"index.html":{}}}],["links",{"_index":432,"title":{},"body":{"controllers/UsersController.html":{}}}],["loggermiddleware",{"_index":283,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"injectables/LoggerMiddleware.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["login",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body('email",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(email",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logs",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["looking",{"_index":575,"title":{},"body":{"index.html":{}}}],["loop",{"_index":628,"title":{},"body":{"index.html":{}}}],["makes",{"_index":583,"title":{},"body":{"index.html":{}}}],["managing",{"_index":596,"title":{},"body":{"index.html":{}}}],["matches",{"_index":211,"title":{},"body":{"classes/CreatePost.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":231,"title":{},"body":{"classes/CreatePost.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/LoggerMiddleware.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"interfaces/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":579,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":270,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(96",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":186,"title":{},"body":{"classes/CreatePost.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":159,"title":{},"body":{"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metadata",{"_index":510,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":137,"title":{},"body":{"classes/CreatePost.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoggerMiddleware.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["middlewareconsumer",{"_index":363,"title":{},"body":{"modules/PostsModule.html":{}}}],["middlewares/logger.middleware",{"_index":368,"title":{},"body":{"modules/PostsModule.html":{}}}],["min",{"_index":271,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":212,"title":{},"body":{"classes/CreatePost.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":239,"title":{},"body":{"classes/CreatePost.html":{},"classes/CreateUserDto.html":{}}}],["minlength(5",{"_index":224,"title":{},"body":{"classes/CreatePost.html":{}}}],["minlength(8",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":514,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":637,"title":{},"body":{"index.html":{}}}],["mode",{"_index":551,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":573,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":652,"title":{},"body":{"index.html":{}}}],["name",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoggerMiddleware.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":623,"title":{},"body":{"index.html":{}}}],["nest",{"_index":539,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":656,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":564,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LoggerMiddleware.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":502,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":306,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":504,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":223,"title":{},"body":{"classes/CreatePost.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":292,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["nestmodule",{"_index":366,"title":{},"body":{"modules/PostsModule.html":{}}}],["new",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["next",{"_index":288,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"controllers/UsersController.html":{}}}],["node.js",{"_index":531,"title":{},"body":{"index.html":{}}}],["npm",{"_index":545,"title":{},"body":{"index.html":{}}}],["number",{"_index":198,"title":{},"body":{"classes/CreatePost.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"interfaces/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["number'})@get",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["object",{"_index":246,"title":{},"body":{"classes/CreatePost.html":{}}}],["object.values(poststatuses).join",{"_index":233,"title":{},"body":{"classes/CreatePost.html":{}}}],["object.values(posttypes).join",{"_index":228,"title":{},"body":{"classes/CreatePost.html":{}}}],["occurred",{"_index":435,"title":{},"body":{"controllers/UsersController.html":{}}}],["offer",{"_index":634,"title":{},"body":{"index.html":{}}}],["official",{"_index":580,"title":{},"body":{"index.html":{}}}],["open",{"_index":639,"title":{},"body":{"index.html":{}}}],["optional",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePost.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/LoggerMiddleware.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":160,"title":{},"body":{"classes/CreatePost.html":{}}}],["options.dto",{"_index":219,"title":{},"body":{"classes/CreatePost.html":{}}}],["options.dto.ts",{"_index":247,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":249,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:9",{"_index":250,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":661,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":498,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["page'})@apiquery({name",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{}}}],["papa",{"_index":58,"title":{},"body":{"injectables/AppService.html":{}}}],["param",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('postid",{"_index":355,"title":{},"body":{"controllers/PostsController.html":{}}}],["param('userid",{"_index":350,"title":{},"body":{"controllers/PostsController.html":{}}}],["param(parseintpipe",{"_index":445,"title":{},"body":{"controllers/UsersController.html":{}}}],["param,dto",{"_index":426,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param,dto.ts",{"_index":278,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param,dto.ts:12",{"_index":281,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoggerMiddleware.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":331,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":624,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":301,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpost",{"_index":298,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":305,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["password)?.id",{"_index":476,"title":{},"body":{"injectables/UsersService.html":{}}}],["patch",{"_index":332,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch('/:id",{"_index":419,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':userid/posts/:postid",{"_index":353,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchpostdto",{"_index":295,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchuser",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(id",{"_index":417,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":303,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["pathuserdto",{"_index":418,"title":{},"body":{"controllers/UsersController.html":{}}}],["per",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{}}}],["platform",{"_index":578,"title":{},"body":{"index.html":{}}}],["please",{"_index":606,"title":{},"body":{"index.html":{}}}],["possible",{"_index":225,"title":{},"body":{"classes/CreatePost.html":{},"index.html":{}}}],["post",{"_index":83,"title":{"interfaces/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostDto.html":{},"interfaces/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post(':userid/posts",{"_index":347,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('login",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@httpcode(200",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.dto",{"_index":302,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":133,"title":{},"body":{"classes/CreatePost.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:106",{"_index":178,"title":{},"body":{"classes/CreatePost.html":{}}}],["post.dto.ts:118",{"_index":195,"title":{},"body":{"classes/CreatePost.html":{}}}],["post.dto.ts:14",{"_index":300,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:166",{"_index":166,"title":{},"body":{"classes/CreatePost.html":{}}}],["post.dto.ts:17",{"_index":201,"title":{},"body":{"classes/CreatePost.html":{}}}],["post.dto.ts:28",{"_index":197,"title":{},"body":{"classes/CreatePost.html":{}}}],["post.dto.ts:40",{"_index":171,"title":{},"body":{"classes/CreatePost.html":{}}}],["post.dto.ts:53",{"_index":188,"title":{},"body":{"classes/CreatePost.html":{}}}],["post.dto.ts:65",{"_index":191,"title":{},"body":{"classes/CreatePost.html":{}}}],["post.dto.ts:75",{"_index":150,"title":{},"body":{"classes/CreatePost.html":{}}}],["post.dto.ts:86",{"_index":182,"title":{},"body":{"classes/CreatePost.html":{}}}],["post.dto.ts:96",{"_index":156,"title":{},"body":{"classes/CreatePost.html":{}}}],["post.id",{"_index":390,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.userid",{"_index":387,"title":{},"body":{"injectables/PostsService.html":{}}}],["postid",{"_index":326,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["postindex",{"_index":388,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":372,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts/posts.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":311,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":41,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":333,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatuses",{"_index":189,"title":{},"body":{"classes/CreatePost.html":{},"miscellaneous/enumerations.html":{}}}],["poststatuses'})@isnotempty()@isenum(poststatuses",{"_index":190,"title":{},"body":{"classes/CreatePost.html":{}}}],["poststatuses.published",{"_index":234,"title":{},"body":{"classes/CreatePost.html":{}}}],["posttype",{"_index":138,"title":{},"body":{"classes/CreatePost.html":{}}}],["posttypes",{"_index":167,"title":{},"body":{"classes/CreatePost.html":{},"miscellaneous/enumerations.html":{}}}],["posttypes'})@isnotempty()@isenum(posttypes",{"_index":170,"title":{},"body":{"classes/CreatePost.html":{}}}],["posttypes.post",{"_index":229,"title":{},"body":{"classes/CreatePost.html":{}}}],["prefix",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":553,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":530,"title":{},"body":{"index.html":{}}}],["project",{"_index":543,"title":{},"body":{"index.html":{}}}],["properties",{"_index":134,"title":{"properties.html":{}},"body":{"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"interfaces/Post.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":334,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users/users.service",{"_index":427,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["publish",{"_index":173,"title":{},"body":{"classes/CreatePost.html":{}}}],["published",{"_index":523,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":139,"title":{},"body":{"classes/CreatePost.html":{}}}],["query",{"_index":423,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":438,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":440,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":604,"title":{},"body":{"index.html":{}}}],["read",{"_index":647,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":562,"title":{},"body":{"index.html":{}}}],["real",{"_index":619,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":509,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":542,"title":{},"body":{"index.html":{}}}],["req",{"_index":290,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["required",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePost.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":586,"title":{},"body":{"index.html":{}}}],["res",{"_index":287,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":598,"title":{},"body":{"index.html":{}}}],["responses",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/LoggerMiddleware.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"interfaces/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["retrieve",{"_index":437,"title":{},"body":{"controllers/UsersController.html":{}}}],["retrieved",{"_index":431,"title":{},"body":{"controllers/UsersController.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoggerMiddleware.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":522,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["run",{"_index":547,"title":{},"body":{"index.html":{}}}],["runs",{"_index":569,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":512,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":535,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":521,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["schema",{"_index":140,"title":{},"body":{"classes/CreatePost.html":{}}}],["series",{"_index":525,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":536,"title":{},"body":{"index.html":{}}}],["setup",{"_index":544,"title":{},"body":{"index.html":{}}}],["side",{"_index":537,"title":{},"body":{"index.html":{}}}],["simple",{"_index":588,"title":{},"body":{"index.html":{}}}],["slug",{"_index":141,"title":{},"body":{"classes/CreatePost.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/LoggerMiddleware.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"interfaces/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":642,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":527,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":516,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":54,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":55,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.module",{"_index":451,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/controllers/auth.controller.ts",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/controllers/auth.controller.ts:32",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/providers/auth.service",{"_index":467,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:19",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:31",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":489,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/controllers/posts.controller.ts",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/controllers/posts.controller.ts:16",{"_index":324,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/controllers/posts.controller.ts:30",{"_index":321,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/controllers/posts.controller.ts:44",{"_index":330,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/dtos/create",{"_index":132,"title":{},"body":{"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":296,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":519,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/interfaces/posts.interface.ts",{"_index":310,"title":{},"body":{"interfaces/Post.html":{},"coverage.html":{}}}],["src/posts/middlewares/logger.middleware.ts",{"_index":284,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/posts/middlewares/logger.middleware.ts:5",{"_index":289,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/posts/posts.module.ts",{"_index":360,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.module.ts:13",{"_index":364,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":371,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:10",{"_index":384,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:35",{"_index":374,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:42",{"_index":378,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:49",{"_index":376,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:56",{"_index":380,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":252,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":276,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":304,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users/users.service",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users/users.service.ts",{"_index":452,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users/users.service.ts:20",{"_index":455,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users/users.service.ts:27",{"_index":456,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users/users.service.ts:34",{"_index":458,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users/users.service.ts:38",{"_index":459,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users/users.service.ts:7",{"_index":466,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:50",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:58",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:65",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:74",{"_index":420,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":449,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":549,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":552,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":554,"title":{},"body":{"index.html":{}}}],["started",{"_index":529,"title":{"index.html":{}},"body":{}}],["starter",{"_index":541,"title":{},"body":{"index.html":{}}}],["statements",{"_index":482,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":142,"title":{},"body":{"classes/CreatePost.html":{},"controllers/PostsController.html":{}}}],["statuses",{"_index":232,"title":{},"body":{"classes/CreatePost.html":{}}}],["statuses.enum",{"_index":217,"title":{},"body":{"classes/CreatePost.html":{}}}],["statuses.enum.ts",{"_index":517,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":627,"title":{},"body":{"index.html":{}}}],["steps",{"_index":566,"title":{},"body":{"index.html":{}}}],["story",{"_index":524,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":584,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/Post.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["successfully",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":345,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":605,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":659,"title":{},"body":{"modules.html":{}}}],["table",{"_index":497,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":496,"title":{},"body":{"coverage.html":{}}}],["tag1",{"_index":237,"title":{},"body":{"classes/CreatePost.html":{}}}],["tag2",{"_index":238,"title":{},"body":{"classes/CreatePost.html":{}}}],["tags",{"_index":143,"title":{},"body":{"classes/CreatePost.html":{}}}],["take",{"_index":567,"title":{},"body":{"index.html":{}}}],["test",{"_index":557,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":560,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":559,"title":{},"body":{"index.html":{}}}],["tests",{"_index":555,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":641,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.isauthenticated('token",{"_index":468,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.authservice.login(email",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.posts.filter(post",{"_index":386,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.posts.findindex(post",{"_index":389,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.posts[postindex",{"_index":392,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.createpost(userid",{"_index":351,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":344,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(userid",{"_index":356,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.users",{"_index":478,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.users.find(user",{"_index":471,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.getuser",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["this.usersservice.getuser(getusersparamdto",{"_index":443,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuseridbyemailandpassword(email",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getusers(limit",{"_index":442,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":620,"title":{},"body":{"index.html":{}}}],["title",{"_index":144,"title":{},"body":{"classes/CreatePost.html":{},"interfaces/Post.html":{},"injectables/PostsService.html":{}}}],["token",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":649,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":220,"title":{},"body":{"classes/CreatePost.html":{},"dependencies.html":{}}}],["true",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePost.html":{},"classes/PatchPostDto.html":{}}}],["true})@isnotempty()@isint",{"_index":299,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["true})@isnotempty()@isnumber",{"_index":200,"title":{},"body":{"classes/CreatePost.html":{}}}],["true})@isnotempty()@isstring()@matches(/^[a",{"_index":183,"title":{},"body":{"classes/CreatePost.html":{}}}],["true})@isnotempty()@isstring()@minlength(5",{"_index":196,"title":{},"body":{"classes/CreatePost.html":{}}}],["true})@minlength(3",{"_index":193,"title":{},"body":{"classes/CreatePost.html":{}}}],["true})@type(undefined",{"_index":165,"title":{},"body":{"classes/CreatePost.html":{}}}],["trying",{"_index":436,"title":{},"body":{"controllers/UsersController.html":{}}}],["twitter",{"_index":655,"title":{},"body":{"index.html":{}}}],["type",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/LoggerMiddleware.html":{},"classes/PatchPostDto.html":{},"interfaces/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["types",{"_index":227,"title":{},"body":{"classes/CreatePost.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["types.enum",{"_index":216,"title":{},"body":{"classes/CreatePost.html":{}}}],["types.enum.ts",{"_index":518,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typescript",{"_index":540,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":162,"title":{},"body":{"classes/CreatePost.html":{}}}],["undefined})@apiquery({name",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":164,"title":{},"body":{"classes/CreatePost.html":{}}}],["unit",{"_index":556,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":666,"title":{},"body":{"properties.html":{}}}],["update",{"_index":327,"title":{},"body":{"controllers/PostsController.html":{}}}],["updated",{"_index":352,"title":{},"body":{"controllers/PostsController.html":{}}}],["updated.'})@patch(':userid/posts/:postid')@httpcode(200",{"_index":329,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":354,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":325,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(userid",{"_index":379,"title":{},"body":{"injectables/PostsService.html":{}}}],["updates",{"_index":629,"title":{},"body":{"index.html":{}}}],["url",{"_index":153,"title":{},"body":{"classes/CreatePost.html":{}}}],["use",{"_index":285,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["use(req",{"_index":286,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["user",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePost.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{}}}],["user'})@apiresponse({status",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.dto",{"_index":307,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":253,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":261,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":257,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:25",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:9",{"_index":259,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":474,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.id",{"_index":472,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.password",{"_index":475,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePost.html":{},"interfaces/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["users",{"_index":277,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":450,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":393,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":42,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":110,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":621,"title":{},"body":{"index.html":{}}}],["valid",{"_index":187,"title":{},"body":{"classes/CreatePost.html":{}}}],["validatenested",{"_index":213,"title":{},"body":{"classes/CreatePost.html":{}}}],["validationpipe",{"_index":424,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":214,"title":{},"body":{"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":242,"title":{},"body":{"classes/CreatePost.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["value1",{"_index":243,"title":{},"body":{"classes/CreatePost.html":{}}}],["value2",{"_index":245,"title":{},"body":{"classes/CreatePost.html":{}}}],["values",{"_index":226,"title":{},"body":{"classes/CreatePost.html":{}}}],["version",{"_index":664,"title":{},"body":{"properties.html":{}}}],["video",{"_index":613,"title":{},"body":{"index.html":{}}}],["visit",{"_index":602,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":616,"title":{},"body":{"index.html":{}}}],["void",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LoggerMiddleware.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":550,"title":{},"body":{"index.html":{}}}],["weak",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["website",{"_index":653,"title":{},"body":{"index.html":{}}}],["working",{"_index":601,"title":{},"body":{"index.html":{}}}],["world",{"_index":147,"title":{},"body":{"classes/CreatePost.html":{}}}],["x",{"_index":631,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":645,"title":{},"body":{"index.html":{}}}],["you're",{"_index":561,"title":{},"body":{"index.html":{}}}],["z0",{"_index":184,"title":{},"body":{"classes/CreatePost.html":{}}}],["z\\d]{8",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*[a",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)[a",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello Kon Papa!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/controllers/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                AuthController is a class that contains the endpoints for the authentication.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@HttpCode(200)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/controllers/auth.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Logs the user in.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                boolean\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, Post } from '@nestjs/common';\nimport { AuthService } from '../providers/auth.service';\n\n/**\n * AuthController is a class that contains the endpoints for the authentication.\n * \n * @class AuthController\n */\n@Controller('auth')\nexport class AuthController {\n    /**\n     * Injects the AuthService into the AuthController.\n     * \n     * @param authService \n     * \n     * @returns void\n     */\n    constructor(\n        private readonly authService: AuthService,\n    ) {}\n\n    /**\n     * Logs the user in.\n     * \n     * @param email\n     * @param password\n     * \n     * @returns boolean\n     */\n    @Post('login')\n    @HttpCode(200)\n    public login(@Body('email') email: string, @Body('password') password: string): any {\n        if (!email || !password) {\n            return 'Email and password are required.';\n        }\n\n        const user = this.authService.login(email, password);\n        if (!user) {\n            return 'User not found.';\n        }\n\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './controllers/auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuthenticated\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthenticated(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:19\n                        \n                    \n\n\n            \n                \n                        Logs the user in.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                any\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, HttpException, Inject, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users/users.service';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        @Inject(forwardRef(() => UsersService))\n        private readonly usersService: UsersService,\n    ) {}\n\n    /**\n     * Logs the user in.\n     * \n     * @param email\n     * @param password\n     * \n     * @returns any\n    */\n    public login(email: string, password: string): any {\n        const userId = this.usersService.getUserIdByEmailAndPassword(email, password);\n\n        if (!userId) {\n            throw new HttpException('User not found.', 404);\n        }\n\n        const user = this.usersService.getUser({ id: userId });\n    \n        return user;\n    }\n\n    public isAuthenticated(token: string): boolean {\n        if (!token) {\n            return false;\n        }\n        return true;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePost.html":{"url":"classes/CreatePost.html","title":"class - CreatePost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Post Content', example: 'Hello World', default: 'Hello World', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured Image URL', example: 'https://example.com/image.jpg', default: 'https://example.com/image.jpg', required: false})@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Meta Options', type: 'array', example: undefined, default: undefined, required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:166\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: undefined, example: undefined, default: undefined, required: true, enum: PostTypes, enumName: 'PostTypes'})@IsNotEmpty()@IsEnum(PostTypes)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Publish On Date', example: '2022-01-01T00:00:00Z', default: '2022-01-01T00:00:00Z', required: false})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Post Excerpt', example: 'Hello World', default: 'Hello World', required: false, format: 'json'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Post Slug', example: 'hello-world', default: 'hello-world', required: true})@IsNotEmpty()@IsString()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug must be a valid URL slug'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatuses\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: undefined, example: undefined, default: undefined, required: true, enum: PostStatuses, enumName: 'PostStatuses'})@IsNotEmpty()@IsEnum(PostStatuses)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Tags', example: undefined, default: undefined, required: false})@IsOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Post Title', example: 'Hello World', default: 'Hello World', required: true})@IsNotEmpty()@IsString()@MinLength(5)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User ID', example: 1, default: 1, required: true})@IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsEnum, IsISO8601, IsJSON, IsNotEmpty, IsNumber, IsOptional, IsString, IsUrl, Matches, MinLength, ValidateNested } from \"class-validator\";\nimport { PostTypes } from \"../enums/post-types.enum\";\nimport { PostStatuses } from \"../enums/post-statuses.enum\";\nimport { CreatePostMetaOptionsDto } from \"./create-post-meta-options.dto\";\nimport { Type } from \"class-transformer\";\nimport { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class CreatePost {\n    @ApiProperty({\n        description: 'User ID',\n        example: 1,\n        default: 1,\n        required: true,\n    })\n    @IsNotEmpty()\n    @IsNumber()\n    userId: number;\n\n    @ApiProperty({\n        description: 'Post Title',\n        example: 'Hello World',\n        default: 'Hello World',\n        required: true,\n    })\n    @IsNotEmpty()\n    @IsString()\n    @MinLength(5)\n    title: string;\n\n    @ApiProperty({\n        description: `Possible values for Post Types: ${Object.values(PostTypes).join(', ')}`,\n        example: PostTypes.POST,\n        default: PostTypes.POST,\n        required: true,\n        enum: PostTypes,\n        enumName: 'PostTypes',\n    })\n    @IsNotEmpty()\n    @IsEnum(PostTypes)\n    postType: PostTypes;\n\n    @ApiProperty({\n        description: 'Post Slug',\n        example: 'hello-world',\n        default: 'hello-world',\n        required: true,\n    })\n    @IsNotEmpty()\n    @IsString()\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n        message: 'Slug must be a valid URL slug',\n    })\n    slug: string;\n\n    @ApiProperty({\n        description: `Possible values for Post Statuses: ${Object.values(PostStatuses).join(', ')}`,\n        example: PostStatuses.PUBLISHED,\n        default: PostStatuses.PUBLISHED,\n        required: true,\n        enum: PostStatuses,\n        enumName: 'PostStatuses',\n    })\n    @IsNotEmpty()\n    @IsEnum(PostStatuses)\n    status: PostStatuses;\n\n    @ApiPropertyOptional({\n        description: 'Post Content',\n        example: 'Hello World',\n        default: 'Hello World',\n        required: false,\n    })\n    @IsString()\n    @IsOptional()\n    content?: string;\n\n    @ApiPropertyOptional({\n        description: 'Post Excerpt',\n        example: 'Hello World',\n        default: 'Hello World',\n        required: false,\n        format: 'json',\n    })\n    @IsOptional()\n    @IsJSON()\n    schema?: string;\n\n    @ApiPropertyOptional({\n        description: 'Featured Image URL',\n        example: 'https://example.com/image.jpg',\n        default: 'https://example.com/image.jpg',\n        required: false,\n    })\n    @IsOptional()\n    @IsUrl()\n    featuredImageUrl?: string;\n\n    @ApiPropertyOptional({\n        description: 'Publish On Date',\n        example: '2022-01-01T00:00:00Z',\n        default: '2022-01-01T00:00:00Z',\n        required: false,\n    })\n    @IsISO8601()\n    @IsOptional()\n    publishOn?: Date;\n\n    @ApiPropertyOptional({\n        description: 'Tags',\n        example: ['tag1', 'tag2'],\n        default: ['tag1', 'tag2'],\n        required: false,\n    })\n    @IsOptional()\n    @IsArray()\n    @IsString({ each: true })\n    @MinLength(3, { each: true })\n    tags?: string[];\n\n    @ApiProperty({\n        description: 'Meta Options',\n        type: 'array',\n        example: [\n            {\n                key: 'key1',\n                value: 'value1',\n            },\n            {\n                key: 'key2',\n                value: 'value2',\n            },\n        ],\n        default: [\n            {\n                key: 'key1',\n                value: 'value1',\n            },\n            {\n                key: 'key2',\n                value: 'value2',\n            },\n        ],\n        required: false,\n        items: {\n            type: 'object',\n            properties: {\n                key: {\n                    type: 'string',\n                    example: 'key1',\n                    default: 'key1',\n                    required: ['Key is required'],\n                },\n                value: {\n                    type: 'string',\n                    example: 'value1',\n                    default: 'value1',\n                    required: ['Value is required'],\n                },\n            },\n        },\n    })\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CreatePostMetaOptionsDto)\n    metaOptions?: CreatePostMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreatePostMetaOptionsDto {\n    @IsNotEmpty()\n    @IsString()\n    key: string;\n\n    @IsNotEmpty()\n    value: any;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/, {message: 'Password too weak'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Optional } from '@nestjs/common';\nimport { IsEmail, IsNotEmpty, IsOptional, IsString, Matches, MaxLength, Min, MinLength } from 'class-validator';\n\nexport class CreateUserDto {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    @MaxLength(96)\n    firstName: string;\n\n    @IsString()\n    @IsOptional()\n    @MinLength(3)\n    @MaxLength(96)\n    lastName?: string;\n\n    @IsEmail()\n    @IsNotEmpty()\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/, { message: 'Password too weak' })\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param,dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: 1, description: 'User id', example: 1})@IsOptional()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param,dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsInt, IsOptional } from \"class-validator\";\n\nexport class GetUsersParamDto {\n    @ApiPropertyOptional({\n        default: 1,\n        description: 'User id',\n        example: 1\n    })\n    @IsOptional()\n    @IsInt()\n    id?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/middlewares/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: any, next: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/middlewares/logger.middleware.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: any, res: any, next: () => void) {\n    console.log('Request...');\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePost)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Post ID', example: 1, default: 1, required: true})@IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { CreatePost } from \"./create-post.dto\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\n\nexport class PatchPostDto extends PartialType(CreatePost) {\n    @ApiProperty({\n        description: 'Post ID',\n        example: 1,\n        default: 1,\n        required: true,\n    })\n    @IsNotEmpty()\n    @IsInt()\n    id: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Post.html":{"url":"interfaces/Post.html","title":"interface - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/interfaces/posts.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Post {\n    userId: number;\n    id: number;\n    title: string;\n    body: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/controllers/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    Public\n                                getAllPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(post: CreatePost, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a post', description: 'Create a new post for the user'})@ApiResponse({status: 201, description: 'The post has been successfully created.'})@Post(':userId/posts')@HttpCode(201)\n                \n            \n\n                    \n                        \n                            Defined in src/posts/controllers/posts.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                post\n                                            \n                                                            CreatePost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId/posts')@HttpCode(200)\n                \n            \n\n                    \n                        \n                            Defined in src/posts/controllers/posts.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto, userId: number, postId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update a post', description: 'Update a post for the user'})@ApiResponse({status: 200, description: 'The post has been successfully updated.'})@Patch(':userId/posts/:postId')@HttpCode(200)\n                \n            \n\n                    \n                        \n                            Defined in src/posts/controllers/posts.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, HttpCode, Param, ParseIntPipe, Patch, Post } from '@nestjs/common';\nimport { PostsService } from '../providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePost } from '../dtos/create-post.dto';\nimport { PatchPostDto } from '../dtos/patch-post.dto';\n\n@ApiTags('Posts')\n@Controller('users')\nexport class PostsController {\n    constructor(\n        private readonly postsService: PostsService,\n    ) {}\n\n    @Get(':userId/posts')\n    @HttpCode(200)\n    public getAllPosts(@Param('userId', ParseIntPipe) userId: number) {\n        return this.postsService.findAll(userId);\n    }\n\n    @ApiOperation({\n        summary: 'Create a post',\n        description: 'Create a new post for the user',\n    })\n    @ApiResponse({ \n        status: 201, \n        description: 'The post has been successfully created.' ,\n    })\n    @Post(':userId/posts')\n    @HttpCode(201)\n    public createPost(@Body() post: CreatePost, @Param('userId', ParseIntPipe) userId: number) {\n        return this.postsService.createPost(userId, post);\n    }\n\n    @ApiOperation({\n        summary: 'Update a post',\n        description: 'Update a post for the user',\n    })\n    @ApiResponse({ \n        status: 200, \n        description: 'The post has been successfully updated.' ,\n    })\n    @Patch(':userId/posts/:postId')\n    @HttpCode(200)\n    public updatePost(@Body() patchPostDto: PatchPostDto, @Param('userId', ParseIntPipe) userId: number, @Param('postId', ParseIntPipe) postId: number) {\n        return this.postsService.updatePost(userId, postId, patchPostDto);\n        \n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.module.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { PostsController } from './controllers/posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { LoggerMiddleware } from './middlewares/logger.middleware';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule],\n})\nexport class PostsModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(LoggerMiddleware)\n      .forRoutes(PostsController);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                posts\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createPost\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(userId: number, post: CreatePost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                post\n                                            \n                                                            CreatePost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CreatePost\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Post[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(userId: number, postId: number, post: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                post\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Post\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Default value : [\n        {\n            userId: 1,\n            id: 1,\n            title: 'Post 1',\n            body: 'Post 1 body'\n        },\n        {\n            userId: 1,\n            id: 2,\n            title: 'Post 2',\n            body: 'Post 2 body'\n        },\n        {\n            userId: 2,\n            id: 3,\n            title: 'Post 3',\n            body: 'Post 3 body'\n        },\n        {\n            userId: 2,\n            id: 4,\n            title: 'Post 4',\n            body: 'Post 4 body'\n        }\n    ]\n                    \n                \n                    \n                        \n                                Defined in src/posts/providers/posts.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, Injectable } from '@nestjs/common';\nimport { Post } from '../interfaces/posts.interface';\nimport { UsersService } from 'src/users/providers/users/users.service';\nimport { CreatePost } from '../dtos/create-post.dto';\nimport { PatchPostDto } from '../dtos/patch-post.dto';\n\n@Injectable()\nexport class PostsService {\n\n    private readonly posts: Post[] = [\n        {\n            userId: 1,\n            id: 1,\n            title: 'Post 1',\n            body: 'Post 1 body'\n        },\n        {\n            userId: 1,\n            id: 2,\n            title: 'Post 2',\n            body: 'Post 2 body'\n        },\n        {\n            userId: 2,\n            id: 3,\n            title: 'Post 3',\n            body: 'Post 3 body'\n        },\n        {\n            userId: 2,\n            id: 4,\n            title: 'Post 4',\n            body: 'Post 4 body'\n        }\n    ];\n\n\n    constructor(\n        private readonly usersService: UsersService,\n    ) {}\n\n    public findAll(userId: number): Post[] {\n        if (!this.usersService.getUser({ id: userId })) {\n            throw new HttpException('User not found', 404);\n        }\n        return this.posts.filter(post => post.userId === userId);\n    }\n\n    public createPost(userId: number, post: CreatePost): CreatePost {\n        if (!this.usersService.getUser({ id: userId })) {\n            throw new HttpException('User not found', 404);\n        }\n        return post;\n    }\n\n    public updatePost(userId: number, postId: number, post: PatchPostDto): Post {\n        if (!this.usersService.getUser({ id: userId })) {\n            throw new HttpException('User not found', 404);\n        }\n        const postIndex = this.posts.findIndex(post => post.id === postId);\n        if (postIndex === -1) {\n            throw new HttpException('Post not found', 404);\n        }\n        return {\n            ...this.posts[postIndex],\n            ...post,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    Public\n                                getUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto, headers: any, ip: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(getUsersParamDto: GetUsersParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all users', description: 'Get all users from the database', responses: undefined})@ApiQuery({name: 'limit', required: false, type: Number, default: 10, description: 'Limit of users per page'})@ApiQuery({name: 'page', required: false, type: Number, default: 1, description: 'Page number'})@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(id: number, pathUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pathUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, DefaultValuePipe, Get, Headers, HttpStatus, Ip, Param, ParseIntPipe, Patch, Post, Query, ValidationPipe } from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param,dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users/users.service';\nimport { ApiOperation, ApiQuery, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Users')\n@Controller('users')\nexport class UsersController {\n\n    constructor(\n        private readonly usersService: UsersService\n    ) {\n\n    }\n\n    @ApiOperation({\n        summary: 'Get all users',\n        description: 'Get all users from the database',\n        responses: {\n            [HttpStatus.OK]: {\n                description: 'The users were successfully retrieved',\n                links: {\n                    'next': {\n                        description: 'The next page of users',\n                    }\n                }\n            },\n            [HttpStatus.INTERNAL_SERVER_ERROR]: {\n                description: 'An error occurred while trying to retrieve the users'\n            }\n        }     \n    })\n    @ApiQuery({\n        name: 'limit',\n        required: false,\n        type: Number,\n        default: 10,\n        description: 'Limit of users per page'\n    })\n    @ApiQuery({\n        name: 'page',\n        required: false,\n        type: Number,\n        default: 1,\n        description: 'Page number'\n    })\n    @Get()\n    public getUsers(\n        @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n        @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n    ) {\n        return this.usersService.getUsers(limit, page);\n    }\n\n    @Get('/:id?')\n    public getUser(\n        @Param() getUsersParamDto: GetUsersParamDto\n    ) {\n        return this.usersService.getUser(getUsersParamDto);\n    }\n\n    @Post()\n    public createUser(\n        @Body() createUserDto: CreateUserDto,\n        @Headers() headers: any,\n        @Ip() ip: string\n    ) {\n        console.log(createUserDto, headers, ip);\n    }\n\n    @Patch('/:id')\n    public patchUser(\n        @Param(ParseIntPipe) id: number,\n        @Body() pathUserDto: PatchUserDto\n    ) {\n\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  imports: [forwardRef(() => AuthModule)],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                users\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getUser\n                            \n                            \n                                    Public\n                                getUserIdByEmailAndPassword\n                            \n                            \n                                    Public\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users/users.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(getUsersParamDto: GetUsersParamDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users/users.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getUserIdByEmailAndPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserIdByEmailAndPassword(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users/users.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users/users.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n            {\n                id: 1,\n                name: 'John Doe',\n                email: 'johndoe@gmail.com',\n                password: '12345678'\n            },\n            {\n                id: 2,\n                name: 'Jane Doe',\n                email: 'janedoe@gmail.com',\n                password: '12345678'\n            }\n        ]\n                    \n                \n                    \n                        \n                                Defined in src/users/providers/users/users.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, HttpException, Inject, Injectable } from '@nestjs/common';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { GetUsersParamDto } from 'src/users/dtos/get-users-param,dto';\n\n@Injectable()\nexport class UsersService {\n    private users = [\n            {\n                id: 1,\n                name: 'John Doe',\n                email: 'johndoe@gmail.com',\n                password: '12345678'\n            },\n            {\n                id: 2,\n                name: 'Jane Doe',\n                email: 'janedoe@gmail.com',\n                password: '12345678'\n            }\n        ];\n\n    constructor(\n        @Inject(forwardRef(() => AuthService))\n        private readonly authService: AuthService,\n    ) {}\n\n    public getUser(getUsersParamDto: GetUsersParamDto) {\n        if (!this.authService.isAuthenticated('token')) {\n            throw new HttpException('Unauthorized', 401);\n        }\n        return this.users.find(user => user.id === getUsersParamDto.id);\n    }\n\n    public getUserIdByEmailAndPassword(email: string, password: string): number {\n        return this.users.find(user => user.email === email && user.password === password)?.id;\n    }\n\n    public getUsers(\n        limit: number,\n        page: number\n    ) {\n        console.log(limit, page);\n        return this.users;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/controllers/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/controllers/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePost\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/interfaces/posts.interface.ts\n            \n            interface\n            Post\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/middlewares/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param,dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatuses   (src/.../post-statuses.enum.ts)\n                        \n                        \n                            PostTypes   (src/.../post-types.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/post-statuses.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatuses\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/post-types.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostTypes\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
